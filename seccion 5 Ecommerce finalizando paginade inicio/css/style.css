
html {
  box-sizing: border-box;  /*para cuando agreguemos un width a un elemento y despues le agregamos un padding no modifique el tamano de ese elemento */
  font-size: 62.5%; /*1 rem va a ser = a  10 pixeles , esto es un hack */
}
*, *:before, *:after {
  box-sizing: inherit;
}
body{

  font-family: "Raleway", sans-serif;
  font-size: 1.6rem; /*para que nuestro texto sea un poco mas grande en este caso de 16px esto solo funciona con el hack de 62.5%*/
  line-height: 1.5;/*para el interlineado */
}



/* globales */

.btn {
    background-color: #8cbc00;
    display: block;
    color: #FFF;
    text-transform: uppercase;
    font-weight: 900;
    padding: 1rem;
    transition: background-color .3s ease-out ;
    text-align: center;
    border: none;
    width: 100%;
}
.btn:hover {
    background-color: #769c02;
    cursor: pointer;
}

h1,h2,h3{
font-family: 'Raleway', sans-serif;
margin: 0 0 5rem 0;
}

h1{
  font-size: 5rem;
}
h2{
  font-size: 4rem;
}
h3{
  font-size: 3rem;
}

a{
  text-decoration: none; /*eliminamos la decoracion del enlace*/
  color: black;
}
.contenedor{ /*aqui 29.1*/

  max-width: 120rem;/*esto va a cortar el border y llega a los 1200 px es decir corta la linea de la barra de navegacion*/

  /*ahora necesitamos centrar nuestro contenido asi que podemos hacerlo con lso margenes*/
  margin: 0 auto; /*de esta forma tanto arriba como abajo el margen es 0 pero a los lados el margen esta automatico esto es para centrar */

  /*0 auto significa arriba y abajo no le des marge , a los lados toma los 1200px y 
  lo que sobre dejalo centrado El margen auto ajustará automáticamente el contenedor al centro del espacio disponible*/


}

.contenedor-navegacion{
border-top: .1rem solid #e1e1e1;

}


.listado-categorias{

display: grid;
grid-template-columns: repeat(3,1fr); /*30.1*/
gap: 2rem;  /*30.3*/

}

img{  /*30.2*/
  max-width: 100%;
  display: block /*31.4*/;
}

/*utilidades*/
.text-center{
  text-align: center;
}


/* Header y Navegacion */




.nombre-sitio{
  margin-top: 5rem;

  text-align: center;
  font-size: 5rem;  /*se recomienda usar las medidas relativas y no las absolutas aqui tomara el 50% de los 100 px del header*/
}
h3{
  font-size: 3rem;
}

.nombre-sitio span{
  color: aqua;
}


.navegacion-principal{

  padding: 2rem;      /*relleno*/
  display: flex;
  justify-content: space-between;


}


/*  vamos a colocar una imagen como background esto se le conoce como hero */

.hero{
  /*recuerda hay que salirse de la hoja de estilos y encontrar la direccion adecuada de la imagen*/
  background-image:url(../Imagenes-Ecommerce/principal.jpg) ;/*para agregar una imagen de fondo*/
  /*hasta ahora ya hemos asignado una imagen para nuestro div pero aun no se muestra
  para que se nos muestre es necesario que haya un contenido o unas dimensiones*/


  height: 55rem;/*ahora con esto ya se nos mostrara la imagen de fondo porque ya tiene
                  unas medidas con la cual mostrarse*/

  background-repeat: no-repeat;       /*para que no se nos repita la imagen*/

  background-size: cover; /*para que no se ocrte y CUBRA todo el ancho*/

  background-position: center center;

  /* DUDA es importante porque los elementos HTML, como un div, tienen dimensiones por defecto solo si contienen algo dentro de ellos, como texto o hijos. Si un elemento no tiene contenido ni dimensiones explícitas, no ocupará espacio en la página, por lo que no se verá nada, ni siquiera una imagen de fondo.

  Cuando defines una imagen de fondo usando CSS, la imagen necesita un área en la cual mostrarse. Si el elemento div no tiene dimensiones, no hay espacio para que la imagen se vea.

  Piensa en ello como un marco vacío en la pared. Si el marco no tiene tamaño, no podrás ponerle una foto. Al darle dimensiones al div, creas ese "marco" en el cual la imagen puede mostrarse */
}

/*categorias*/

.categoria{
  padding-top: 5rem;
}



.categoria a{ /*31.2*/
  text-align: center;
  display: block;
  padding: 2rem;
  font-size: 2rme;
  transition: all 0.4s ease-out;;
}


.categoria a:hover/*31.3*/{
  background-color: #037bc0;
  color: #fff;

}

.contenedor .ancla{  /*para el efecto en las anclas en la barra de navegacion */
  transition: all 0.3s ease-out;
}


.contenedor .ancla:hover/*31.3*/{
  background-color: #037bc2;
  color: #fff;
  text-decoration: none;
  font-size: 3rem;
  border-radius: 4rem;
  padding: 0 3rem 0 3rem; /*como las agujas del relog*/


}



/*bloque NOSOTROS */

.sobre-nosotros{
  background-image: linear-gradient( to right , transparent 50% ,  #037bc0 50% , #037bc0 100% ), /*es un degradado lineal */
  url(../Imagenes-Ecommerce/nosotros.jpg);
  padding: 10rem 0;
  background-position: left center ;
  background-repeat: no-repeat; /*para que no se repita mi imagen*/
  background-size: 100% , 120rem; /*el lineal gradien ponlo al 100% pero el rem de la imagen ponlo a 120 rem*/
}

.sobre-nosotros-grid{
  display: flex; /*Flexbox es como una hilera de amigos tomados de la mano. Sirve para acomodar cosas en una sola dirección, ya sea en una fila o en una columna.Uso: Cuando quieres que las cosas se alineen perfectamente, como los botones de una barra de menú, o para centrar una imagen en el medio de la página. Es perfecto para esos trabajos pequeños y ordenados.*/
  justify-content: flex-end;   
}

.texto-nosotros{   /*si queremos que esto se aplique al texto entonces esta clase debe estar en el padre*/
  flex-basis: 50%; /*es el ancho del elemento*/
  padding-left: 10rem;/*este sera el relleno del borde hacia adentro en el texto sobre nosotros en todas las direcciones*/
  color: white;
}


/*_________________listado de productos________________*/
.contenido-principal{
  padding-top: 5rem; 
}

.listado-productos{ /*esta clase agarra al primer nivel de hijos */
  display: grid;  /*en esta parte habilitamos grid para los elementos hijos de esta clase*/
  grid-template-columns: repeat(6,1fr); /*aqui le decimos en cuantas partes de va a distribuir*/
  /* column-gap: 2rem; esto es para los espacios entre colunnas */
  /* row-gap: 2rem;esto es para los espacios entre filas */
  gap:2rem;
}

.producto:nth-child(1){ /*de esta forma seleccionamos a los hijos individualmente*/
  grid-column-start: 1; /*le decimos que inicie en el grid 1 */
  grid-column-end: 7  ; /*y termine en el grid 7*/
  display: grid; /*habilitamos display grid aqui ya que vamos a ordenar la imagen de un lado y el texto del otro */
  grid-template-columns: 3fr 1fr;  /*cada uno crea una columna aqui nosotros creamos 2 columnas las cuales dividimos , como sabemos que usamos 2 columnas? porque 3fr hace 1 columna y 1fr hacen las 2da columna entonces esto queda como que mira tenemos 2 columnas el primer hijo que encuentres dale 3 fracciones y el hijo siguiente dale 1 fraccion , si tuvieramos una 3ra columna entonces al hijo que le sigue  css le asigna el fr que siga. sino hay una 3ra columna entonces css crea una 2da row y pone debajo al 3er hijo dandole la primera parte de la fracciones*/
}
.producto:nth-child(1) img{ /*seleccionamos el hijo 1 pero los elementos imagenes*/
  height: 43rem;
  width: 100%;
  object-fit: cover;
}
.producto:nth-child(2){
  grid-column-start: 1;
  grid-column-end: 4;
  
}
.producto:nth-child(2) img, /*con la , le decimos que haga esto a estos elementos es importante la ,*/
.producto:nth-child(3) img{
  height: 30rem;
  width: 100%;
  object-fit: cover;
  
}
.producto:nth-child(3){
  grid-column-start: 4;
  grid-column-end: 7;
  
}
.producto:nth-child(4 ){
  grid-column-start: 1;
  grid-column-end: 3;
  
}
.producto:nth-child(5 ){
  grid-column-start: 3;
  grid-column-end: 5;
  
}
.producto:nth-child(6 ){
  grid-column-start: 5;
  grid-column-end: 7;
  
}
/*recuerde que display:grid automaticametne va creando rows cuando las column se completan*/

.producto{
  background-color: #037bc0;
}

.texto-producto{
  text-align: center;
  color: #fff;
  padding: 2rem;
}

.texto-producto h3{
  margin: 0;
}

.texto-producto p{
  margin: 0 0 .5rem 0;;
}

.texto-producto .precio {
  font-size: 2.8rem;
  font-weight: 900;
}


/*---------footer---------*/

.site-footer{
  border-top: 1px solid #e1e1e1;
  margin-top: 4rem;
  padding: 4rem;
}

.grid-footer{
  display: grid;
  grid-template-columns: repeat(3,1fr);
  gap: 2rem;
}